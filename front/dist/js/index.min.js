function Banner(){this.bannerGroup=$("#banner-group"),this.index=1,this.leftArrow=$(".left-arrow"),this.rightArrow=$(".right-arrow"),this.bannerUl=$("#banner-ul"),this.liList=this.bannerUl.children("li"),this.bannerLiCount=this.liList.length,this.bannerWidth=798,this.pagControl=$(".page-control")}function Index(){this.category_id=0,this.page=2}Banner.prototype.lsitenBannerHover=function(){var n=this;this.bannerGroup.hover(function(){clearInterval(n.timer),n.toggleArrow(!0)},function(){n.loop(),n.toggleArrow(!1)})},Banner.prototype.toggleArrow=function(n){var t=this;n?(t.leftArrow.show(),t.rightArrow.show()):(t.leftArrow.hide(),t.rightArrow.hide())},Banner.prototype.loop=function(){var n=this;$("#banner-ul");this.timer=setInterval(function(){n.index>=n.bannerLiCount+1?(n.bannerUl.css({left:-n.bannerWidth}),n.index=2):n.index++,n.anamite()},2e3)},Banner.prototype.run=function(){this.initBanneer(),this.loop(),this.listArrowClick(),this.initPageControl(),this.lsitenBannerHover(),this.lsitPageControl()},Banner.prototype.anamite=function(){var n=this,t=n.index;t=0===t?n.bannerLiCount-1:t===n.bannerLiCount+1?0:n.index-1,$("#banner-ul").stop().animate({left:-798*n.index},500),n.pagControl.children("li").eq(t).addClass("active").siblings().removeClass("active")},Banner.prototype.lsitPageControl=function(){var e=this;$("#banner-ul");e.pagControl.children("li").each(function(n,t){$(t).click(function(){e.index=n+1,e.anamite()})})},Banner.prototype.initPageControl=function(){for(var n=this,t=0;t<n.bannerLiCount;t++){var e=$("<li></li>");n.pagControl.append(e),0===t&&e.addClass("active")}n.pagControl.css({width:12*n.bannerLiCount+16+16*(n.bannerLiCount-1)})},Banner.prototype.initBanneer=function(){var n=this,t=n.liList.eq(0).clone(),e=n.liList.eq(n.bannerLiCount-1).clone();n.bannerUl.append(t),n.bannerUl.append(e),n.bannerUl.css({width:n.bannerWidth*(n.bannerLiCount+2),left:-n.bannerWidth})},Banner.prototype.listArrowClick=function(){var n=this;$("#banner-ul");n.leftArrow.click(function(){0===n.index?(n.bannerUl.css({left:n.bannerWidth*n.bannerLiCount}),n.index=n.bannerLiCount-1):n.index--,n.anamite()}),n.rightArrow.click(function(){n.index===n.bannerLiCount+1?(n.bannerUl.css({left:n.bannerWidth}),n.index=2):n.index++,n.anamite()})},Index.prototype.listLoadMoreEvent=function(){var i=this;i.categroy_id=0;var r=$("#load-more");r.click(function(){xfzajax.get({url:"/news/news_list/",data:{p:i.page,categroy_id:i.categroy_id},success:function(n){if(200===n.code){var t=n.data;if(console.log(t),0<t.length){var e=template("news-item",{newses:t});$(".list-inner-group").append(e),i.page+=1}else r.hide()}}})})},Index.prototype.listCategrySwichEvent=function(){var o=this;$(".list-tab").children().click(function(){var r=$(this),a=r.attr("data-categroy");console.log(a);xfzajax.get({url:"/news/news_list/",data:{categroy_id:a,p:1},success:function(n){if(200===n.code){var t=n.data,e=template("news-item",{newses:t}),i=$(".list-inner-group");i.empty(),i.append(e),o.page=2,o.categroy_id=a,r.addClass("active").siblings().removeClass("active"),$("#load-more").show()}}})})},Index.prototype.run=function(){this.listLoadMoreEvent(),this.listCategrySwichEvent()},$(function(){(new Banner).run(),(new Index).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
