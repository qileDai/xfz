function NewsCategroy(){}NewsCategroy.prototype.run=function(){var t=this;t.listAddCategroyEvent(),t.listEditNewsCategroyEvent(),t.listDelteCategroyEvent()},NewsCategroy.prototype.listAddCategroyEvent=function(){$("#add-btn").click(function(){xfzalert.alertOneInput({title:"添加新闻分类",placeholder:"请输入新闻分类",confirmCallback:function(t){xfzajax.post({url:"/cms/add_news_categroy/",data:{name:t},success:function(t){200===t.code?window.location.reload():(xfzalert.close(),window.messageBox.showError(t.message))}})}})})},NewsCategroy.prototype.listEditNewsCategroyEvent=function(){$(".edit-btn").click(function(){var t=$(this).parent().parent(),e=t.attr("data-pk"),a=t.attr("data-name");console.log(e),console.log(a),xfzalert.alertOneInput({title:"修改分类名称",placeholder:"请输入新的分类名称",value:a,confirmCallback:function(t){console.log(t),xfzajax.post({url:"/cms/edit_news_categroy/",data:{pk:e,name:t},success:function(t){console.log(t),200===t.code?window.location.reload():xfzalert.close()}})}})})},NewsCategroy.prototype.listenEditCategoryEvent=function(){$(".edit-btn ").click(function(){var t=$(this).parent().parent(),e=t.attr("data-pk"),a=t.attr("data-name");xfzalert.alertOneInput({title:"修改分类名称",placeholder:"请输入新的分类名称",value:a,confirmCallback:function(t){xfzajax.post({url:"/cms/edit_news_categroy/",data:{pk:e,name:t},success:function(t){200===t.code?window.location.reload():xfzalert.close()}})}})})},NewsCategroy.prototype.listDelteCategroyEvent=function(){$(".delete-btn").click(function(){var t=$(this).parent().parent().attr("data-pk");xfzalert.alertConfirm({title:"您确定要删除这个分类吗？",confirmCallback:function(){xfzajax.post({url:"/cms/delete_news_categroy/",data:{pk:t},success:function(t){200===t.code&&window.location.reload()}})}})})},$(function(){(new NewsCategroy).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
