function News(){}News.prototype.run=function(){var e=this;e.listUploadFileEvent(),e.initEditor(),e.listSubmitNewsEvent()},News.prototype.listUploadFileEvent=function(){var n=$("#thumbnail-btn");n.change(function(){var e=n[0].files[0],t=new FormData;t.append("file",e),xfzajax.post({url:"/cms/upload_file/",data:t,contentType:!1,processData:!1,success:function(e){if(200===e.code){console.log(e.data);var t=e.data.url;console.log(t),$("#thumbnail-form").val(t)}}})})},News.prototype.initEditor=function(){window.ue=UE.getEditor("ueditor",{initialFrameHeight:200,serverUrl:"/ueditor/upload/"})},News.prototype.listenQiniuUploadFileEvent=function(){var l=this;$("#thumbnail-btn").change(function(){var a=this.files[0];xfzajax.get({url:"/cms/qntoken/",success:function(e){if(200===e.code){var t=e.data.token,n=(new Date).getTime()+"."+a.name.split(".")[1],o={fname:n,params:{},mimeType:["image/png","image/jpeg","image/gif","video/x-ms-wmv"]},i={useCdnDomain:!0,retryCount:6,region:qiniu.region.z0};qiniu.upload(a,n,t,o,i).subscribe({next:l.handleFileUploadProgress,error:l.handleFileUploadError,complete:l.handleFileUploadComplete})}}})})},News.prototype.handleFileUploadProgress=function(e){var t=e.total,n=e.percent;console.log(n),console.log(t)},News.prototype.handleFileUploadError=function(e){console.log(e.message)},News.prototype.handleFileUploadComplete=function(e){console.log(e)},News.prototype.listSubmitNewsEvent=function(){$("#submitbtn").click(function(e){$(this);e.preventDefault();var t=$("input[name='title']").val(),n=$("select[name='categroy']").val(),o=$("input[name='desc']").val(),i=$("input[name='thumbnail']").val(),a=window.ue.getContent();xfzajax.post({url:"/cms/write_news/",data:{title:t,categroy:n,desc:o,thumbnail:i,content:a},success:function(e){200===e.code&&xfzalert.alertSuccess("恭喜！新闻发布成功",function(){window.location.reload()})}})})},$(function(){(new News).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
