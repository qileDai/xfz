function FrontBase(){}function Auth(){var t=this;t.maskWrapper=$(".mask-wrapper"),t.scrollWrapper=$(".scrool-wrapper"),t.smsCaptcha=$(".sms-captcha-btn")}FrontBase.prototype.run=function(){this.listenAuthBoxHover(),this.listNavClickEvent()},FrontBase.prototype.listenAuthBoxHover=function(){var t=$(".auth-box"),n=$(".user-more-box");t.hover(function(){n.show()},function(){n.hide()})},FrontBase.prototype.listNavClickEvent=function(){var t=window.location.href,n=window.location.protocol+"//"+window.location.host,a=t.replace(n,"");$(".nav li").each(function(t,n){var e=$(n);if(e.children("a").attr("href")===a)return e.addClass("active"),!1})},$(function(){(new FrontBase).run()}),Auth.prototype.run=function(){var t=this;t.listenShowHideEvent(),t.listenSwitchEvent(),t.listenSigninEvent(),t.listCaptchaEvent(),t.listenSmsCaptchaEvent(),t.listSiginUpEvent()},Auth.prototype.showEvent=function(){this.maskWrapper.show()},Auth.prototype.hideEvent=function(){this.maskWrapper.hide()},Auth.prototype.listenShowHideEvent=function(){var t=this,n=$(".signin-btn"),e=$(".signup-btn"),a=$(".close-btn");n.click(function(){console.log("dddd"),t.showEvent(),t.scrollWrapper.css({left:0})}),e.click(function(){t.showEvent(),t.scrollWrapper.css({left:-400})}),a.click(function(){t.hideEvent()})},Auth.prototype.listenSwitchEvent=function(){var n=this;$(".switch").click(function(){var t=n.scrollWrapper.css("left");(t=parseInt(t))<0?n.scrollWrapper.animate({left:"0"}):n.scrollWrapper.animate({left:"-400px"})})},Auth.prototype.listCaptchaEvent=function(){var t=$(".image-captcha-btn");t.click(function(){t.attr("src","account/image_captcha?random="+Math.random())})},Auth.prototype.listenSigninEvent=function(){var s=this,t=$(".singin-group"),a=t.find("input[name='telephone']"),o=t.find("input[name='password']"),i=t.find("input[name='remeber']");t.find(".submit-btn").click(function(){var t=a.val(),n=o.val(),e=i.prop("checked");xfzajax.post({url:"/account/login/",data:{telephone:t,password:n,remember:e?1:0},success:function(t){if(200==t.code)s.hideEvent(),window.location.reload();else{var n=t.message;if("string"==typeof n||n.constructor==String)window.messageBox.show(n);else for(var e in n){var a=n[e][0];window.messageBox.show(a)}}},fail:function(t){console.log(t)}})})},Auth.prototype.smsSuccessEvent=function(){var t=this;messageBox.showSuccess("短信验证码发送成功！"),t.smsCaptcha.addClass("disabled");var n=10;t.smsCaptcha.unbind("click");var e=setInterval(function(){t.smsCaptcha.text(n+"s"),(n-=1)<=0&&(clearInterval(e),t.smsCaptcha.removeClass("disabled"),t.smsCaptcha.text("发送验证码"),t.listenSmsCaptchaEvent())},1e3)},Auth.prototype.listSiginUpEvent=function(){var f=$(".singup-group");f.find(".submit-btn").click(function(t){console.log("点击成功"),event.preventDefault();var n=f.find("input[name='telephone']"),e=f.find("input[name='username']"),a=f.find("input[name='img_captcha']"),s=f.find("input[name='password1']"),o=f.find("input[name='password2']"),i=f.find("input[name='sms_captcha']"),c=n.val(),r=e.val(),p=a.val(),l=s.val(),u=o.val(),h=i.val();xfzajax.post({url:"/account/register/",data:{telephone:c,username:r,img_captcha:p,password1:l,password2:u,sms_captcha:h},success:function(t){console.log(t)}})})},Auth.prototype.listenSmsCaptchaEvent=function(){var n=this,t=$(".singup-group"),e=$(".sms-captcha-btn"),a=t.find("input[name='telephone']");console.log(e),e.click(function(){var t=a.val();console.log(t),t||messageBox.showInfo("请输入手机号码！"),xfzajax.get({url:"/account/sms_captcha/",data:{telephone:t},success:function(t){200==t.code&&n.smsSuccessEvent()},fail:function(t){console.log(t)}})})},$(function(){(new Auth).run()}),$(function(){$(".switch").click(function(){var t=$(".scrool-wrapper"),n=t.css("left");(n=parseInt(n))<0?t.animate({left:"0"}):t.animate({left:"-400px"})})}),$(function(){template&&(template.defaults.imports.timeSince=function(t){var n=new Date(t),e=n.getTime(),a=((new Date).getTime()-e)/1e3;if(a<60)return"刚刚";if(60<=a&&a<3600)return minutes=parseInt(a/60),minutes+"分钟前";if(3600<=a&&a<86400)return(c=parseInt(a/60/60))+"小时前";if(86400<=a&&a<2592e3)return days=parseInt(a/60/60/24),days+"天前";var s=n.getFullYear(),o=n.getMonth(),i=n.getDay(),c=n.getHours();return s+"/"+o+"/"+i+" "+c+":"+n.getMinutes()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
